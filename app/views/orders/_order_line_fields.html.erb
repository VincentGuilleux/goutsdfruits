<% uuid = SecureRandom.uuid %>
<!-- on génère un code aléatoire qu'on stocke dans une variable uuid, on a donc une variable uuid par order_line_field générée dans le formulaire. C'est nécessaire pour pouvoir ensuite targeter distinctement chaque order line du formulaire dans le counter.js -->
<%= f.association :product, collection: Product.select { |product| product.total_remaining_quantity > 0} , input_html: { class: 'product-input JSproductselect', "data-uuid" => uuid }, label: false, prompt: "Quel produit ?" %>
<!-- Methode Ruby -->
<div><i class="fas fa-minus pl-1 pr-1 pb-3 JSminuscounter" data-uuid="<%= uuid %>"></i></div>
<!-- les boutons Font Awesome sont encapsulés dans des div sinon on n'arrive pas à les targeter avec le code data-prepend de application.js -->
<%= f.input :quantity, label: false, input_html: { class: 'quantity-input', value: f.object.quantity || '1', "data-uuid" => uuid, "data-product-id" => f.object.product_id }, readonly: true %>
<!-- value = attribut HTML pour valeur affichée dans le champ qu'on fixe par défaut à 1 dans le formulaire -->
<!-- f.object fait référence au modèle du formulaire soit ici order_lines (https://stackoverflow.com/questions/41556889/what-does-f-object-do-in-the-rails-form-builder) -->
<!-- readonly : attribut HTML pour non-interaction par l'utilisateur (champ non saisissable) -->
<div><i class="fas fa-plus pl-1 pr-1 pb-3 JSpluscounter" data-uuid="<%= uuid %>"></i></div>

<!-- On tag les boutons +/- avec des classes pluscounter/minuscounter car il y en aura plusieurs sur la page (un par ligne de produit générée) / on ne peut donc pas utiliser d'ID -->
<div class="pl-3 pr-3 pb-3">
  <span class="JSpriceperline" data-uuid="<%= uuid %>">0</span><sup> €</sup>
</div>

